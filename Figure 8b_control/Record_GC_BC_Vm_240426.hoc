//for debugging
/*
objref PC, PCvode
PC= new ParallelContext()
PC.nthread(2048)
dt=.1
load_file("stdgui.hoc")
//PC.runworker()


RNGseed=5678
number_of_axon=2500 //2500 axons, producing a connection probability of 2% (Scharfman, 2009)
input_sample_size = 50 //how many axons each GC sample from
number_of_input=50 //each axon produce 50 inputs that are distributed in time
Activeaxon_number=750//total number of active axons
GC_number = number_of_axon * 5
xopen("GC_BC template.hoc")
objref GC[GC_number]
for a=0, GC_number-1 {GC[a]=new excitatory_cell()
					  //access GC[0].soma
					  //geom_nseg_shared()


					 }


BC_number = (number_of_axon * 5 /100)*1.5 
//create BCs
objref BC[BC_number]
for a=0, BC_number-1 {BC[a]=new inhibitory_cell()}


*/

//for debugging

strdef fname1
objref GCVm[500], BCVm[BC_number]
strdef fname
proc recordGCVm() {local b1, b2 localobj findGC, rng5
					//select 1000 GCs
 

					findGC=new Vector(GC_number,-1000)
					rng5=new Random(RNGseed*3)

					b1=0
					while (b1<500) {b2=rng5.discunif(0, GC_number-1)
									 while (findGC.x[b2]>0) {b2=rng5.discunif(0, GC_number-1)}
									 findGC.x[b2]=1000
									 b1=b1+1}
					b2=0
					for b1=0, findGC.size-1 {if (findGC.x[b1]>0) {access GC[b1].soma
																  GCVm[b2]=new Vector()
																  GCVm[b2].record(&v(0.5))
																  b2=b2+1
																  }				
											}
											
						
					}
 
proc recordBCVm(){local b1, b2
				  for b1=0, BC_number-1 {access BC[b1].soma
										 BCVm[b1]=new Vector()
				  BCVm[b1].record(&v(0.5))}
				}

strdef fname
//objref GCVm[500] 
//for a=0, 499 GCVm[a]=new Vector(100, a)
proc writeGCVm() {local b1, b2 localobj IO1

					//objref IO1
					IO1=new File()
					sprint(fname1,"%s%g%s","GC_Vm_", $1,"axon.txt")
					IO1.wopen(fname1)
					sprint(fname, "%s%s", "Time", " ")

					//print "fff"
					for b1=0, 499 {sprint(fname, "%s%s%g%s", fname, "GC", b1, "Vm ")}
					sprint(fname,"%s%s", fname, "\n")	
					IO1.printf("%s", fname)
					 
			  
					//print "ddd"
					for b1=0, GCVm[0].size-1 {  sprint(fname, "%g%s", b1, " ")
												 
												for b2=0, 499 {sprint(fname, "%s%f%s", fname, GCVm[b2].x[b1], " ")}
												sprint(fname, "%s%s", fname, "\n")
												IO1.printf("%s", fname)
												
												
												}
					IO1.close()
}

proc writeBCVm()	{local b1, b2 localobj IO1

					//objref IO1
					IO1=new File()
					sprint(fname1,"%s%g%s","BC_Vm_", $1,"axon.txt")
					IO1.wopen(fname1)
					sprint(fname, "%s%s", "Time", " ")

					//print "fff"
					for b1=0, BC_number-1 {sprint(fname, "%s%s%g%s", fname, "BC", b1, "Vm ")}
					sprint(fname,"%s%s", fname, "\n")	
					IO1.printf("%s", fname)
					 
			  
					//print "ddd"
					for b1=0, BCVm[0].size-1 {  sprint(fname, "%g%s", b1, " ")
												 
												for b2=0, BC_number-1 {sprint(fname, "%s%f%s", fname, BCVm[b2].x[b1], " ")}
												sprint(fname, "%s%s", fname, "\n")
												IO1.printf("%s", fname)
												
												
												}
					IO1.close()
}




recordGCVm() 
recordBCVm()
/*
tstop=10
run()
writeGCVm()

writeBCVm()
PC.done()
*/